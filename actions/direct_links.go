package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/hardenedlayer/singlayer/models"
	"github.com/markbates/pop"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (DirectLink)
// DB Table: Plural (DirectLinks)
// Resource: Plural (DirectLinks)
// Path: Plural (/direct_links)
// View Template Folder: Plural (/templates/directLinks/)

// DirectLinksResource is the resource for the direct_link model
type DirectLinksResource struct {
	buffalo.Resource
}

// List gets all DirectLinks. This function is mapped to the the path
// GET /direct_links
func (v DirectLinksResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	directLinks := &models.DirectLinks{}
	// You can order your list here. Just change
	err := tx.All(directLinks)
	// to:
	// err := tx.Order("(case when completed then 1 else 2 end) desc, lower([sort_parameter]) asc").All(directLinks)
	// Don't forget to change [sort_parameter] to the parameter of
	// your model, which should be used for sorting.
	if err != nil {
		return err
	}
	// Make direct_links available inside the html template
	c.Set("directLinks", directLinks)
	return c.Render(200, r.HTML("direct_links/index.html"))
}

// Show gets the data for one DirectLink. This function is mapped to
// the path GET /direct_links/{direct_link_id}
func (v DirectLinksResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty DirectLink
	directLink := &models.DirectLink{}
	// To find the DirectLink the parameter direct_link_id is used.
	err := tx.Find(directLink, c.Param("direct_link_id"))
	if err != nil {
		return err
	}
	// Make directLink available inside the html template
	c.Set("directLink", directLink)
	return c.Render(200, r.HTML("direct_links/show.html"))
}

// New renders the formular for creating a new direct_link.
// This function is mapped to the path GET /direct_links/new
func (v DirectLinksResource) New(c buffalo.Context) error {
	// Make directLink available inside the html template
	c.Set("directLink", &models.DirectLink{})
	return c.Render(200, r.HTML("direct_links/new.html"))
}

// Create adds a direct_link to the DB. This function is mapped to the
// path POST /direct_links
func (v DirectLinksResource) Create(c buffalo.Context) error {
	// Allocate an empty DirectLink
	directLink := &models.DirectLink{}
	// Bind directLink to the html form elements
	err := c.Bind(directLink)
	if err != nil {
		return err
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(directLink)
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make directLink available inside the html template
		c.Set("directLink", directLink)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("direct_links/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "DirectLink was created successfully")
	// and redirect to the direct_links index page
	return c.Redirect(302, "/direct_links/%s", directLink.ID)
}

// Edit renders a edit formular for a direct_link. This function is
// mapped to the path GET /direct_links/{direct_link_id}/edit
func (v DirectLinksResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty DirectLink
	directLink := &models.DirectLink{}
	err := tx.Find(directLink, c.Param("direct_link_id"))
	if err != nil {
		return err
	}
	// Make directLink available inside the html template
	c.Set("directLink", directLink)
	return c.Render(200, r.HTML("direct_links/edit.html"))
}

// Update changes a direct_link in the DB. This function is mapped to
// the path PUT /direct_links/{direct_link_id}
func (v DirectLinksResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty DirectLink
	directLink := &models.DirectLink{}
	err := tx.Find(directLink, c.Param("direct_link_id"))
	if err != nil {
		return err
	}
	// Bind direct_link to the html form elements
	err = c.Bind(directLink)
	if err != nil {
		return err
	}
	verrs, err := tx.ValidateAndUpdate(directLink)
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make directLink available inside the html template
		c.Set("directLink", directLink)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("direct_links/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "DirectLink was updated successfully")
	// and redirect to the direct_links index page
	return c.Redirect(302, "/direct_links/%s", directLink.ID)
}

// Destroy deletes a direct_link from the DB. This function is mapped
// to the path DELETE /direct_links/{direct_link_id}
func (v DirectLinksResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty DirectLink
	directLink := &models.DirectLink{}
	// To find the DirectLink the parameter direct_link_id is used.
	err := tx.Find(directLink, c.Param("direct_link_id"))
	if err != nil {
		return err
	}
	err = tx.Destroy(directLink)
	if err != nil {
		return err
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "DirectLink was destroyed successfully")
	// Redirect to the direct_links index page
	return c.Redirect(302, "/direct_links")
}
