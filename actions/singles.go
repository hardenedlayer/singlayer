package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/hardenedlayer/singlayer/models"
	"github.com/markbates/pop"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Single)
// DB Table: Plural (Singles)
// Resource: Plural (Singles)
// Path: Plural (/singles)
// View Template Folder: Plural (/templates/singles/)

// SinglesResource is the resource for the single model
type SinglesResource struct {
	buffalo.Resource
}

// List gets all Singles. This function is mapped to the the path
// GET /singles
func (v SinglesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	singles := &models.Singles{}
	// You can order your list here. Just change
	err := tx.All(singles)
	// to:
	// err := tx.Order("(case when completed then 1 else 2 end) desc, lower([sort_parameter]) asc").All(singles)
	// Don't forget to change [sort_parameter] to the parameter of
	// your model, which should be used for sorting.
	if err != nil {
		return err
	}
	// Make singles available inside the html template
	c.Set("singles", singles)
	return c.Render(200, r.HTML("singles/index.html"))
}

// Show gets the data for one Single. This function is mapped to
// the path GET /singles/{single_id}
func (v SinglesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Single
	single := &models.Single{}
	// To find the Single the parameter single_id is used.
	err := tx.Find(single, c.Param("single_id"))
	if err != nil {
		return err
	}
	// Make single available inside the html template
	c.Set("single", single)
	return c.Render(200, r.HTML("singles/show.html"))
}

// New renders the formular for creating a new single.
// This function is mapped to the path GET /singles/new
func (v SinglesResource) New(c buffalo.Context) error {
	// Make single available inside the html template
	c.Set("single", &models.Single{})
	return c.Render(200, r.HTML("singles/new.html"))
}

// Create adds a single to the DB. This function is mapped to the
// path POST /singles
func (v SinglesResource) Create(c buffalo.Context) error {
	// Allocate an empty Single
	single := &models.Single{}
	// Bind single to the html form elements
	err := c.Bind(single)
	if err != nil {
		return err
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(single)
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make single available inside the html template
		c.Set("single", single)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("singles/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Single was created successfully")
	// and redirect to the singles index page
	return c.Redirect(302, "/singles/%s", single.ID)
}

// Edit renders a edit formular for a single. This function is
// mapped to the path GET /singles/{single_id}/edit
func (v SinglesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Single
	single := &models.Single{}
	err := tx.Find(single, c.Param("single_id"))
	if err != nil {
		return err
	}
	// Make single available inside the html template
	c.Set("single", single)
	return c.Render(200, r.HTML("singles/edit.html"))
}

// Update changes a single in the DB. This function is mapped to
// the path PUT /singles/{single_id}
func (v SinglesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Single
	single := &models.Single{}
	err := tx.Find(single, c.Param("single_id"))
	if err != nil {
		return err
	}
	// Bind single to the html form elements
	err = c.Bind(single)
	if err != nil {
		return err
	}
	verrs, err := tx.ValidateAndUpdate(single)
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make single available inside the html template
		c.Set("single", single)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("singles/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Single was updated successfully")
	// and redirect to the singles index page
	return c.Redirect(302, "/singles/%s", single.ID)
}

// Destroy deletes a single from the DB. This function is mapped
// to the path DELETE /singles/{single_id}
func (v SinglesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Single
	single := &models.Single{}
	// To find the Single the parameter single_id is used.
	err := tx.Find(single, c.Param("single_id"))
	if err != nil {
		return err
	}
	err = tx.Destroy(single)
	if err != nil {
		return err
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "Single was destroyed successfully")
	// Redirect to the singles index page
	return c.Redirect(302, "/singles")
}
