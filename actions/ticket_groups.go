package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/hardenedlayer/singlayer/models"
	"github.com/markbates/pop"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (TicketGroup)
// DB Table: Plural (TicketGroups)
// Resource: Plural (TicketGroups)
// Path: Plural (/ticket_groups)
// View Template Folder: Plural (/templates/ticketGroups/)

// TicketGroupsResource is the resource for the ticket_group model
type TicketGroupsResource struct {
	buffalo.Resource
}

// List gets all TicketGroups. This function is mapped to the the path
// GET /ticket_groups
func (v TicketGroupsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	ticketGroups := &models.TicketGroups{}
	// You can order your list here. Just change
	err := tx.All(ticketGroups)
	// to:
	// err := tx.Order("(case when completed then 1 else 2 end) desc, lower([sort_parameter]) asc").All(ticketGroups)
	// Don't forget to change [sort_parameter] to the parameter of
	// your model, which should be used for sorting.
	if err != nil {
		return err
	}
	// Make ticket_groups available inside the html template
	c.Set("ticketGroups", ticketGroups)
	return c.Render(200, r.HTML("ticket_groups/index.html"))
}

// Show gets the data for one TicketGroup. This function is mapped to
// the path GET /ticket_groups/{ticket_group_id}
func (v TicketGroupsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty TicketGroup
	ticketGroup := &models.TicketGroup{}
	// To find the TicketGroup the parameter ticket_group_id is used.
	err := tx.Find(ticketGroup, c.Param("ticket_group_id"))
	if err != nil {
		return err
	}
	// Make ticketGroup available inside the html template
	c.Set("ticketGroup", ticketGroup)
	return c.Render(200, r.HTML("ticket_groups/show.html"))
}

// New renders the formular for creating a new ticket_group.
// This function is mapped to the path GET /ticket_groups/new
func (v TicketGroupsResource) New(c buffalo.Context) error {
	// Make ticketGroup available inside the html template
	c.Set("ticketGroup", &models.TicketGroup{})
	return c.Render(200, r.HTML("ticket_groups/new.html"))
}

// Create adds a ticket_group to the DB. This function is mapped to the
// path POST /ticket_groups
func (v TicketGroupsResource) Create(c buffalo.Context) error {
	// Allocate an empty TicketGroup
	ticketGroup := &models.TicketGroup{}
	// Bind ticketGroup to the html form elements
	err := c.Bind(ticketGroup)
	if err != nil {
		return err
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(ticketGroup)
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make ticketGroup available inside the html template
		c.Set("ticketGroup", ticketGroup)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("ticket_groups/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "TicketGroup was created successfully")
	// and redirect to the ticket_groups index page
	return c.Redirect(302, "/ticket_groups/%s", ticketGroup.ID)
}

// Edit renders a edit formular for a ticket_group. This function is
// mapped to the path GET /ticket_groups/{ticket_group_id}/edit
func (v TicketGroupsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty TicketGroup
	ticketGroup := &models.TicketGroup{}
	err := tx.Find(ticketGroup, c.Param("ticket_group_id"))
	if err != nil {
		return err
	}
	// Make ticketGroup available inside the html template
	c.Set("ticketGroup", ticketGroup)
	return c.Render(200, r.HTML("ticket_groups/edit.html"))
}

// Update changes a ticket_group in the DB. This function is mapped to
// the path PUT /ticket_groups/{ticket_group_id}
func (v TicketGroupsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty TicketGroup
	ticketGroup := &models.TicketGroup{}
	err := tx.Find(ticketGroup, c.Param("ticket_group_id"))
	if err != nil {
		return err
	}
	// Bind ticket_group to the html form elements
	err = c.Bind(ticketGroup)
	if err != nil {
		return err
	}
	verrs, err := tx.ValidateAndUpdate(ticketGroup)
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make ticketGroup available inside the html template
		c.Set("ticketGroup", ticketGroup)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("ticket_groups/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "TicketGroup was updated successfully")
	// and redirect to the ticket_groups index page
	return c.Redirect(302, "/ticket_groups/%s", ticketGroup.ID)
}

// Destroy deletes a ticket_group from the DB. This function is mapped
// to the path DELETE /ticket_groups/{ticket_group_id}
func (v TicketGroupsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty TicketGroup
	ticketGroup := &models.TicketGroup{}
	// To find the TicketGroup the parameter ticket_group_id is used.
	err := tx.Find(ticketGroup, c.Param("ticket_group_id"))
	if err != nil {
		return err
	}
	err = tx.Destroy(ticketGroup)
	if err != nil {
		return err
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "TicketGroup was destroyed successfully")
	// Redirect to the ticket_groups index page
	return c.Redirect(302, "/ticket_groups")
}
