package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/hardenedlayer/singlayer/models"
	"github.com/markbates/pop"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (TicketUpdate)
// DB Table: Plural (TicketUpdates)
// Resource: Plural (TicketUpdates)
// Path: Plural (/ticket_updates)
// View Template Folder: Plural (/templates/ticketUpdates/)

// TicketUpdatesResource is the resource for the ticket_update model
type TicketUpdatesResource struct {
	buffalo.Resource
}

// List gets all TicketUpdates. This function is mapped to the the path
// GET /ticket_updates
func (v TicketUpdatesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	ticketUpdates := &models.TicketUpdates{}
	// You can order your list here. Just change
	err := tx.All(ticketUpdates)
	// to:
	// err := tx.Order("(case when completed then 1 else 2 end) desc, lower([sort_parameter]) asc").All(ticketUpdates)
	// Don't forget to change [sort_parameter] to the parameter of
	// your model, which should be used for sorting.
	if err != nil {
		return err
	}
	// Make ticket_updates available inside the html template
	c.Set("ticketUpdates", ticketUpdates)
	return c.Render(200, r.HTML("ticket_updates/index.html"))
}

// Show gets the data for one TicketUpdate. This function is mapped to
// the path GET /ticket_updates/{ticket_update_id}
func (v TicketUpdatesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty TicketUpdate
	ticketUpdate := &models.TicketUpdate{}
	// To find the TicketUpdate the parameter ticket_update_id is used.
	err := tx.Find(ticketUpdate, c.Param("ticket_update_id"))
	if err != nil {
		return err
	}
	// Make ticketUpdate available inside the html template
	c.Set("ticketUpdate", ticketUpdate)
	return c.Render(200, r.HTML("ticket_updates/show.html"))
}

// New renders the formular for creating a new ticket_update.
// This function is mapped to the path GET /ticket_updates/new
func (v TicketUpdatesResource) New(c buffalo.Context) error {
	// Make ticketUpdate available inside the html template
	c.Set("ticketUpdate", &models.TicketUpdate{})
	return c.Render(200, r.HTML("ticket_updates/new.html"))
}

// Create adds a ticket_update to the DB. This function is mapped to the
// path POST /ticket_updates
func (v TicketUpdatesResource) Create(c buffalo.Context) error {
	// Allocate an empty TicketUpdate
	ticketUpdate := &models.TicketUpdate{}
	// Bind ticketUpdate to the html form elements
	err := c.Bind(ticketUpdate)
	if err != nil {
		return err
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(ticketUpdate)
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make ticketUpdate available inside the html template
		c.Set("ticketUpdate", ticketUpdate)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("ticket_updates/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "TicketUpdate was created successfully")
	// and redirect to the ticket_updates index page
	return c.Redirect(302, "/ticket_updates/%s", ticketUpdate.ID)
}

// Edit renders a edit formular for a ticket_update. This function is
// mapped to the path GET /ticket_updates/{ticket_update_id}/edit
func (v TicketUpdatesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty TicketUpdate
	ticketUpdate := &models.TicketUpdate{}
	err := tx.Find(ticketUpdate, c.Param("ticket_update_id"))
	if err != nil {
		return err
	}
	// Make ticketUpdate available inside the html template
	c.Set("ticketUpdate", ticketUpdate)
	return c.Render(200, r.HTML("ticket_updates/edit.html"))
}

// Update changes a ticket_update in the DB. This function is mapped to
// the path PUT /ticket_updates/{ticket_update_id}
func (v TicketUpdatesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty TicketUpdate
	ticketUpdate := &models.TicketUpdate{}
	err := tx.Find(ticketUpdate, c.Param("ticket_update_id"))
	if err != nil {
		return err
	}
	// Bind ticket_update to the html form elements
	err = c.Bind(ticketUpdate)
	if err != nil {
		return err
	}
	verrs, err := tx.ValidateAndUpdate(ticketUpdate)
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make ticketUpdate available inside the html template
		c.Set("ticketUpdate", ticketUpdate)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("ticket_updates/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "TicketUpdate was updated successfully")
	// and redirect to the ticket_updates index page
	return c.Redirect(302, "/ticket_updates/%s", ticketUpdate.ID)
}

// Destroy deletes a ticket_update from the DB. This function is mapped
// to the path DELETE /ticket_updates/{ticket_update_id}
func (v TicketUpdatesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty TicketUpdate
	ticketUpdate := &models.TicketUpdate{}
	// To find the TicketUpdate the parameter ticket_update_id is used.
	err := tx.Find(ticketUpdate, c.Param("ticket_update_id"))
	if err != nil {
		return err
	}
	err = tx.Destroy(ticketUpdate)
	if err != nil {
		return err
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "TicketUpdate was destroyed successfully")
	// Redirect to the ticket_updates index page
	return c.Redirect(302, "/ticket_updates")
}
