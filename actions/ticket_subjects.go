package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/hardenedlayer/singlayer/models"
	"github.com/markbates/pop"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (TicketSubject)
// DB Table: Plural (TicketSubjects)
// Resource: Plural (TicketSubjects)
// Path: Plural (/ticket_subjects)
// View Template Folder: Plural (/templates/ticketSubjects/)

// TicketSubjectsResource is the resource for the ticket_subject model
type TicketSubjectsResource struct {
	buffalo.Resource
}

// List gets all TicketSubjects. This function is mapped to the the path
// GET /ticket_subjects
func (v TicketSubjectsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	ticketSubjects := &models.TicketSubjects{}
	// You can order your list here. Just change
	err := tx.All(ticketSubjects)
	// to:
	// err := tx.Order("(case when completed then 1 else 2 end) desc, lower([sort_parameter]) asc").All(ticketSubjects)
	// Don't forget to change [sort_parameter] to the parameter of
	// your model, which should be used for sorting.
	if err != nil {
		return err
	}
	// Make ticket_subjects available inside the html template
	c.Set("ticketSubjects", ticketSubjects)
	return c.Render(200, r.HTML("ticket_subjects/index.html"))
}

// Show gets the data for one TicketSubject. This function is mapped to
// the path GET /ticket_subjects/{ticket_subject_id}
func (v TicketSubjectsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty TicketSubject
	ticketSubject := &models.TicketSubject{}
	// To find the TicketSubject the parameter ticket_subject_id is used.
	err := tx.Find(ticketSubject, c.Param("ticket_subject_id"))
	if err != nil {
		return err
	}
	// Make ticketSubject available inside the html template
	c.Set("ticketSubject", ticketSubject)
	return c.Render(200, r.HTML("ticket_subjects/show.html"))
}

// New renders the formular for creating a new ticket_subject.
// This function is mapped to the path GET /ticket_subjects/new
func (v TicketSubjectsResource) New(c buffalo.Context) error {
	// Make ticketSubject available inside the html template
	c.Set("ticketSubject", &models.TicketSubject{})
	return c.Render(200, r.HTML("ticket_subjects/new.html"))
}

// Create adds a ticket_subject to the DB. This function is mapped to the
// path POST /ticket_subjects
func (v TicketSubjectsResource) Create(c buffalo.Context) error {
	// Allocate an empty TicketSubject
	ticketSubject := &models.TicketSubject{}
	// Bind ticketSubject to the html form elements
	err := c.Bind(ticketSubject)
	if err != nil {
		return err
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(ticketSubject)
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make ticketSubject available inside the html template
		c.Set("ticketSubject", ticketSubject)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("ticket_subjects/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "TicketSubject was created successfully")
	// and redirect to the ticket_subjects index page
	return c.Redirect(302, "/ticket_subjects/%s", ticketSubject.ID)
}

// Edit renders a edit formular for a ticket_subject. This function is
// mapped to the path GET /ticket_subjects/{ticket_subject_id}/edit
func (v TicketSubjectsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty TicketSubject
	ticketSubject := &models.TicketSubject{}
	err := tx.Find(ticketSubject, c.Param("ticket_subject_id"))
	if err != nil {
		return err
	}
	// Make ticketSubject available inside the html template
	c.Set("ticketSubject", ticketSubject)
	return c.Render(200, r.HTML("ticket_subjects/edit.html"))
}

// Update changes a ticket_subject in the DB. This function is mapped to
// the path PUT /ticket_subjects/{ticket_subject_id}
func (v TicketSubjectsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty TicketSubject
	ticketSubject := &models.TicketSubject{}
	err := tx.Find(ticketSubject, c.Param("ticket_subject_id"))
	if err != nil {
		return err
	}
	// Bind ticket_subject to the html form elements
	err = c.Bind(ticketSubject)
	if err != nil {
		return err
	}
	verrs, err := tx.ValidateAndUpdate(ticketSubject)
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make ticketSubject available inside the html template
		c.Set("ticketSubject", ticketSubject)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("ticket_subjects/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "TicketSubject was updated successfully")
	// and redirect to the ticket_subjects index page
	return c.Redirect(302, "/ticket_subjects/%s", ticketSubject.ID)
}

// Destroy deletes a ticket_subject from the DB. This function is mapped
// to the path DELETE /ticket_subjects/{ticket_subject_id}
func (v TicketSubjectsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty TicketSubject
	ticketSubject := &models.TicketSubject{}
	// To find the TicketSubject the parameter ticket_subject_id is used.
	err := tx.Find(ticketSubject, c.Param("ticket_subject_id"))
	if err != nil {
		return err
	}
	err = tx.Destroy(ticketSubject)
	if err != nil {
		return err
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "TicketSubject was destroyed successfully")
	// Redirect to the ticket_subjects index page
	return c.Redirect(302, "/ticket_subjects")
}
