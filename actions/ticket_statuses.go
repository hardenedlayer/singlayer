package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/hardenedlayer/singlayer/models"
	"github.com/markbates/pop"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (TicketStatus)
// DB Table: Plural (TicketStatuses)
// Resource: Plural (TicketStatuses)
// Path: Plural (/ticket_statuses)
// View Template Folder: Plural (/templates/ticketStatuses/)

// TicketStatusesResource is the resource for the ticket_status model
type TicketStatusesResource struct {
	buffalo.Resource
}

// List gets all TicketStatuses. This function is mapped to the the path
// GET /ticket_statuses
func (v TicketStatusesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	ticketStatuses := &models.TicketStatuses{}
	// You can order your list here. Just change
	err := tx.All(ticketStatuses)
	// to:
	// err := tx.Order("(case when completed then 1 else 2 end) desc, lower([sort_parameter]) asc").All(ticketStatuses)
	// Don't forget to change [sort_parameter] to the parameter of
	// your model, which should be used for sorting.
	if err != nil {
		return err
	}
	// Make ticket_statuses available inside the html template
	c.Set("ticketStatuses", ticketStatuses)
	return c.Render(200, r.HTML("ticket_statuses/index.html"))
}

// Show gets the data for one TicketStatuse. This function is mapped to
// the path GET /ticket_statuses/{ticket_status_id}
func (v TicketStatusesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty TicketStatus
	ticketStatus := &models.TicketStatus{}
	// To find the TicketStatus the parameter ticket_status_id is used.
	err := tx.Find(ticketStatus, c.Param("ticket_status_id"))
	if err != nil {
		return err
	}
	// Make ticketStatus available inside the html template
	c.Set("ticketStatus", ticketStatus)
	return c.Render(200, r.HTML("ticket_statuses/show.html"))
}

// New renders the formular for creating a new ticket_status.
// This function is mapped to the path GET /ticket_statuses/new
func (v TicketStatusesResource) New(c buffalo.Context) error {
	// Make ticketStatuse available inside the html template
	c.Set("ticketStatus", &models.TicketStatus{})
	return c.Render(200, r.HTML("ticket_statuses/new.html"))
}

// Create adds a ticket_status to the DB. This function is mapped to the
// path POST /ticket_statuses
func (v TicketStatusesResource) Create(c buffalo.Context) error {
	// Allocate an empty TicketStatuse
	ticketStatus := &models.TicketStatus{}
	// Bind ticketStatuse to the html form elements
	err := c.Bind(ticketStatus)
	if err != nil {
		return err
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(ticketStatus)
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make ticketStatus available inside the html template
		c.Set("ticketStatus", ticketStatus)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("ticket_statuses/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "TicketStatus was created successfully")
	// and redirect to the ticket_statuses index page
	return c.Redirect(302, "/ticket_statuses/%s", ticketStatus.ID)
}

// Edit renders a edit formular for a ticket_status. This function is
// mapped to the path GET /ticket_statuses/{ticket_status_id}/edit
func (v TicketStatusesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty TicketStatus
	ticketStatus := &models.TicketStatus{}
	err := tx.Find(ticketStatus, c.Param("ticket_status_id"))
	if err != nil {
		return err
	}
	// Make ticketStatus available inside the html template
	c.Set("ticketStatus", ticketStatus)
	return c.Render(200, r.HTML("ticket_statuses/edit.html"))
}

// Update changes a ticket_status in the DB. This function is mapped to
// the path PUT /ticket_statuses/{ticket_status_id}
func (v TicketStatusesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty TicketStatus
	ticketStatus := &models.TicketStatus{}
	err := tx.Find(ticketStatus, c.Param("ticket_status_id"))
	if err != nil {
		return err
	}
	// Bind ticket_status to the html form elements
	err = c.Bind(ticketStatus)
	if err != nil {
		return err
	}
	verrs, err := tx.ValidateAndUpdate(ticketStatus)
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make ticketStatus available inside the html template
		c.Set("ticketStatus", ticketStatus)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("ticket_statuses/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "TicketStatus was updated successfully")
	// and redirect to the ticket_statuses index page
	return c.Redirect(302, "/ticket_statuses/%s", ticketStatus.ID)
}

// Destroy deletes a ticket_status from the DB. This function is mapped
// to the path DELETE /ticket_statuses/{ticket_status_id}
func (v TicketStatusesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty TicketStatus
	ticketStatus := &models.TicketStatus{}
	// To find the TicketStatus the parameter ticket_status_id is used.
	err := tx.Find(ticketStatus, c.Param("ticket_status_id"))
	if err != nil {
		return err
	}
	err = tx.Destroy(ticketStatus)
	if err != nil {
		return err
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "TicketStatus was destroyed successfully")
	// Redirect to the ticket_statuses index page
	return c.Redirect(302, "/ticket_statuses")
}
