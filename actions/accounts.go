package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/hardenedlayer/singlayer/models"
	"github.com/markbates/pop"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Account)
// DB Table: Plural (Accounts)
// Resource: Plural (Accounts)
// Path: Plural (/accounts)
// View Template Folder: Plural (/templates/accounts/)

// AccountsResource is the resource for the account model
type AccountsResource struct {
	buffalo.Resource
}

// List gets all Accounts. This function is mapped to the the path
// GET /accounts
func (v AccountsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	accounts := &models.Accounts{}
	// You can order your list here. Just change
	err := tx.All(accounts)
	// to:
	// err := tx.Order("(case when completed then 1 else 2 end) desc, lower([sort_parameter]) asc").All(accounts)
	// Don't forget to change [sort_parameter] to the parameter of
	// your model, which should be used for sorting.
	if err != nil {
		return err
	}
	// Make accounts available inside the html template
	c.Set("accounts", accounts)
	return c.Render(200, r.HTML("accounts/index.html"))
}

// Show gets the data for one Account. This function is mapped to
// the path GET /accounts/{account_id}
func (v AccountsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Account
	account := &models.Account{}
	// To find the Account the parameter account_id is used.
	err := tx.Find(account, c.Param("account_id"))
	if err != nil {
		return err
	}
	// Make account available inside the html template
	c.Set("account", account)
	return c.Render(200, r.HTML("accounts/show.html"))
}

// New renders the formular for creating a new account.
// This function is mapped to the path GET /accounts/new
func (v AccountsResource) New(c buffalo.Context) error {
	// Make account available inside the html template
	c.Set("account", &models.Account{})
	return c.Render(200, r.HTML("accounts/new.html"))
}

// Create adds a account to the DB. This function is mapped to the
// path POST /accounts
func (v AccountsResource) Create(c buffalo.Context) error {
	// Allocate an empty Account
	account := &models.Account{}
	// Bind account to the html form elements
	err := c.Bind(account)
	if err != nil {
		return err
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(account)
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make account available inside the html template
		c.Set("account", account)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("accounts/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Account was created successfully")
	// and redirect to the accounts index page
	return c.Redirect(302, "/accounts/%s", account.ID)
}

// Edit renders a edit formular for a account. This function is
// mapped to the path GET /accounts/{account_id}/edit
func (v AccountsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Account
	account := &models.Account{}
	err := tx.Find(account, c.Param("account_id"))
	if err != nil {
		return err
	}
	// Make account available inside the html template
	c.Set("account", account)
	return c.Render(200, r.HTML("accounts/edit.html"))
}

// Update changes a account in the DB. This function is mapped to
// the path PUT /accounts/{account_id}
func (v AccountsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Account
	account := &models.Account{}
	err := tx.Find(account, c.Param("account_id"))
	if err != nil {
		return err
	}
	// Bind account to the html form elements
	err = c.Bind(account)
	if err != nil {
		return err
	}
	verrs, err := tx.ValidateAndUpdate(account)
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make account available inside the html template
		c.Set("account", account)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("accounts/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Account was updated successfully")
	// and redirect to the accounts index page
	return c.Redirect(302, "/accounts/%s", account.ID)
}

// Destroy deletes a account from the DB. This function is mapped
// to the path DELETE /accounts/{account_id}
func (v AccountsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Account
	account := &models.Account{}
	// To find the Account the parameter account_id is used.
	err := tx.Find(account, c.Param("account_id"))
	if err != nil {
		return err
	}
	err = tx.Destroy(account)
	if err != nil {
		return err
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "Account was destroyed successfully")
	// Redirect to the accounts index page
	return c.Redirect(302, "/accounts")
}
